# -*- coding: utf-8 -*-
"""SOLANA TOOL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AFqXwmHjPonPYgBCnBjWWCPvu-WocoH_
"""

!!pip install solana==0.21.0
!pip install requests

try:
    import solana
    print("La biblioteca solana fue importada correctamente.")
except ModuleNotFoundError as e:
    print(f"Error de importación: {e}")

from solana.publickey import PublicKey
from solana.rpc.api import Client

# Conectar al cliente de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Definir las wallets y entidades
entidades = {
    "drae": ["6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d", "Ejm8uEyjn3DJ8H1T3oXK8jpG3mV3SkF7UgCxLdfnTVEv"],
}

# Obtener balance de SOL
def obtener_balance(wallet):
    return client.get_balance(PublicKey(wallet))["result"]["value"] / 1e9  # Convertir lamports a SOL

# Obtener tokens SPL de una wallet con manejo actualizado
def obtener_tokens_spl(wallet):
    response = client.get_token_accounts_by_owner(
        PublicKey(wallet),
        {"programId": PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")}
    )
    tokens = {}

    for account in response['result']['value']:
        try:
            token_address = account['account']['data']['parsed']['info']['mint']
            token_amount = account['account']['data']['parsed']['info']['tokenAmount']['uiAmount']
            if token_address in tokens:
                tokens[token_address] += token_amount
            else:
                tokens[token_address] = token_amount
        except KeyError as e:
            print(f"Error al procesar la cuenta: {e}")

    return tokens



# Sumar balances de SOL y tokens SPL por entidad
for entidad, wallets in entidades.items():
    total_sol = sum([obtener_balance(wallet) for wallet in wallets])
    total_tokens = {}

    for wallet in wallets:
        tokens = obtener_tokens_spl(wallet)
        for token, amount in tokens.items():
            if token in total_tokens:
                total_tokens[token] += amount
            else:
                total_tokens[token] = amount

    print(f"{entidad}: {total_sol} SOL")
    for token, amount in total_tokens.items():
        print(f"  Token {token}: {amount} unidades")

def obtener_tokens_spl(wallet):
    response = client.get_token_accounts_by_owner(
        PublicKey(wallet),
        program_id=PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
    )
    print(response)
    return response

# Ejecutar para ver la respuesta completa de las wallets en la consola
for entidad, wallets in entidades.items():
    for wallet in wallets:
        tokens = obtener_tokens_spl(wallet)

def obtener_tokens_spl(wallet):
    response = client.get_token_accounts_by_owner(
        PublicKey(wallet),
        {"filters": [{"dataSize": 165}, {"memcmp": {"offset": 0, "bytes": PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA").to_base58()}}]}
    )
    print(response)
    return response

# Ejecutar para ver la respuesta completa de las wallets en la consola
for entidad, wallets in entidades.items():
    for wallet in wallets:
        tokens = obtener_tokens_spl(wallet)

!pip show solana

from solana.publickey import PublicKey
from solana.rpc.api import Client

client = Client("https://api.mainnet-beta.solana.com")

# Verificar la conexión y obtener datos de una wallet específica
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"  # Reemplaza con una wallet válida
response = client.get_account_info(PublicKey(wallet))
print(response)

# Intentar obtener las cuentas de token asociadas correctamente
def obtener_tokens_spl(wallet):
    response = client.get_token_accounts_by_owner(
        PublicKey(wallet),
        {"programId": PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")}
    )
    print(response)
    return response

wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"  # La wallet con tokens SPL
obtener_tokens_spl(wallet)

import requests

def obtener_tokens_spl_solscan(wallet):
    url = f"https://public-api.solscan.io/account/tokens?account={wallet}"
    headers = {
        "Accept": "application/json"
    }
    response = requests.get(url, headers=headers)
    print("Respuesta cruda de la API:", response.text)  # Imprimir la respuesta cruda
    return response.text

# Wallet que contiene tokens SPL
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
obtener_tokens_spl_solscan(wallet)

import requests

def obtener_tokens_spl_solscan(wallet):
    url = f"https://pro-api.solscan.io/v2.0/account/tokens?account={wallet}"  # URL correcta
    headers = {
        "Accept": "application/json",
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkQXQiOjE3Mjg0NTg5MjI2NjMsImVtYWlsIjoib25jaGFpbmFscGhhQGdtYWlsLmNvbSIsImFjdGlvbiI6InRva2VuLWFwaSIsImFwaVZlcnNpb24iOiJ2MiIsImlhdCI6MTcyODQ1ODkyMn0.w1CEimLY_nl6QHcBg3RwhQzKeWGU7NTTrcEPt5U9BZo"  # Tu API Key
    }
    response = requests.get(url, headers=headers)
    print(f"Estado de la respuesta: {response.status_code}")
    print("Respuesta de la API de Solscan:")
    print(response.text)  # Imprime la respuesta en formato texto
    return response.json()

# Wallet que contiene tokens SPL
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"

obtener_tokens_spl_solscan(wallet)

!pip install solana

!pip show solana

from solana.rpc.api import Client
from solana.publickey import PublicKey

# Conectar a la red principal de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Función para obtener los tokens SPL de una wallet
def obtener_tokens_spl(wallet):
    response = client.get_token_accounts_by_owner(
        PublicKey(wallet),
        {"filters": [{"dataSize": 165}]}
    )
    return response

# Wallet de ejemplo
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
response = obtener_tokens_spl(wallet)
print(response)

from solana.rpc.api import Client
from solders.pubkey import Pubkey

# Conectar a la red principal de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Función para obtener los tokens SPL de una wallet
def obtener_tokens_spl(wallet):
    filters = {
        "filters": [{"dataSize": 165}]
    }
    response = client.get_token_accounts_by_owner(
        Pubkey.from_string(wallet),
        {"filters": filters}  # Reemplazar con la estructura adecuada
    )
    return response

# Wallet drae
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
response = obtener_tokens_spl(wallet)
print(response)

!pip install solana

!pip show solana

from solana.rpc.api import Client
from solana.publickey import PublicKey

# Conectar a la red principal de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Función para obtener los tokens SPL de una wallet
def obtener_tokens_spl(wallet):
    filters = {
        "filters": [{"dataSize": 165}]
    }
    response = client.get_token_accounts_by_owner(
        PublicKey(wallet),
        {"filters": filters}
    )
    return response

# Wallet drae
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
response = obtener_tokens_spl(wallet)
print(response)

!pip install solana
!pip install solders

from solana.rpc.api import Client
from solders.pubkey import Pubkey

# Conectar a la red principal de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Función para obtener los tokens SPL de una wallet
def obtener_tokens_spl(wallet):
    filters = {
        "filters": [{"dataSize": 165}]  # Filtro adecuado para cuentas de tokens SPL
    }
    response = client.get_token_accounts_by_owner(
        Pubkey.from_string(wallet),
        {"filters": filters}
    )
    return response

# Wallet de ejemplo
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
response = obtener_tokens_spl(wallet)
print(response)

from solana.rpc.api import Client
from solders.pubkey import Pubkey

# Conectar a la red principal de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Función para obtener los tokens SPL de una wallet
def obtener_tokens_spl(wallet):
    filters = {
        "filters": [{"dataSize": 165}],  # Filtro adecuado para cuentas de tokens SPL
    }

    opts = {
        "filters": filters,
        "encoding": "base64",  # Se incluye la codificación esperada
    }

    # Usar el filtro correcto y pasar los argumentos adecuados
    response = client.get_token_accounts_by_owner(
        Pubkey.from_string(wallet),
        opts
    )
    return response

# Wallet de ejemplo
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
response = obtener_tokens_spl(wallet)
print(response)

from solana.rpc.api import Client
from solders.pubkey import Pubkey
from solana.rpc.types import RpcAccountInfoConfig, TokenAccountOpts  # Importa las clases adecuadas

# Conectar a la red principal de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Función para obtener los tokens SPL de una wallet
def obtener_tokens_spl(wallet):
    filters = {
        "filters": [{"dataSize": 165}],  # Filtro adecuado para cuentas de tokens SPL
    }

    opts = TokenAccountOpts(filters=filters, encoding="base64")  # Usa el objeto TokenAccountOpts

    # Usar el filtro correcto y pasar los argumentos adecuados
    response = client.get_token_accounts_by_owner(
        Pubkey.from_string(wallet),
        opts=opts
    )
    return response

# Wallet de ejemplo
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
response = obtener_tokens_spl(wallet)
print(response)

from solana.rpc.api import Client
from solana.publickey import PublicKey

# Conectar a la red principal de Solana
client = Client("https://api.mainnet-beta.solana.com")

# Función para obtener los tokens SPL de una wallet
def obtener_tokens_spl(wallet):
    response = client.get_token_accounts_by_owner(
        PublicKey(wallet),
        program_id=PublicKey("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")  # ID del programa SPL Token
    )
    return response

# Wallet de ejemplo
wallet = "6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9ywvaEebQqEo8d"
response = obtener_tokens_spl(wallet)
print(response)

# Diccionario para almacenar wallets agrupadas por entidades
wallets_entidades = {}

# Función para agregar una wallet a una entidad
def agregar_wallet(entidad, wallet):
    if entidad in wallets_entidades:
        wallets_entidades[entidad].append(wallet)
    else:
        wallets_entidades[entidad] = [wallet]
    print(f"Wallet {wallet} agregada a la entidad {entidad}.")

# Función para mostrar las wallets de una entidad
def mostrar_wallets_entidad(entidad):
    if entidad in wallets_entidades:
        print(f"Wallets de {entidad}: {wallets_entidades[entidad]}")
    else:
        print(f"No se encontraron wallets para la entidad {entidad}.")

# Ejemplo de uso:
agregar_wallet("Entidad1", "Wallet1")
agregar_wallet("Entidad1", "Wallet2")
agregar_wallet("Entidad2", "Wallet3")

# Mostrar wallets de una entidad
mostrar_wallets_entidad("Entidad1")

import sqlite3

# Conexión a la base de datos (se creará si no existe)
conn = sqlite3.connect('wallets.db')
cursor = conn.cursor()

# Crear la tabla de wallets por entidad
cursor.execute('''CREATE TABLE IF NOT EXISTS wallets_entidades
                  (entidad TEXT, wallet TEXT)''')

# Función para agregar una wallet a una entidad en la base de datos
def agregar_wallet_db(entidad, wallet):
    cursor.execute("INSERT INTO wallets_entidades (entidad, wallet) VALUES (?, ?)", (entidad, wallet))
    conn.commit()
    print(f"Wallet {wallet} agregada a la entidad {entidad}.")

# Función para mostrar wallets de una entidad desde la base de datos
def mostrar_wallets_entidad_db(entidad):
    cursor.execute("SELECT wallet FROM wallets_entidades WHERE entidad=?", (entidad,))
    wallets = cursor.fetchall()
    if wallets:
        print(f"Wallets de {entidad}: {[w[0] for w in wallets]}")
    else:
        print(f"No se encontraron wallets para la entidad {entidad}.")

# Ejemplo de uso con base de datos
agregar_wallet_db("Entidad1", "Wallet1")
agregar_wallet_db("Entidad1", "Wallet2")
agregar_wallet_db("Entidad2", "Wallet3")

# Mostrar wallets de una entidad
mostrar_wallets_entidad_db("Entidad1")

# Estructura de ejemplo
wallets_db = {}

def agregar_entidad(nombre_entidad):
    if nombre_entidad not in wallets_db:
        wallets_db[nombre_entidad] = {}

def agregar_wallet(nombre_entidad, wallet, label):
    if nombre_entidad in wallets_db:
        wallets_db[nombre_entidad][wallet] = label

def renombrar_wallet(nombre_entidad, wallet, nuevo_label):
    if nombre_entidad in wallets_db and wallet in wallets_db[nombre_entidad]:
        wallets_db[nombre_entidad][wallet] = nuevo_label

def buscar_wallet(wallet):
    for entidad, wallets in wallets_db.items():
        if wallet in wallets:
            return entidad, wallets[wallet]
    return None, None

import ipywidgets as widgets
from IPython.display import display

# Campos de texto para agregar entidad y wallet
entidad_input = widgets.Text(placeholder='Nombre de la entidad')
wallet_input = widgets.Text(placeholder='Wallet')
label_input = widgets.Text(placeholder='Label de la wallet')

# Botones para agregar entidad y wallet
boton_agregar_entidad = widgets.Button(description="Agregar Entidad")
boton_agregar_wallet = widgets.Button(description="Agregar Wallet")

# Área de resultados
resultado = widgets.Output()

# Funciones para manejar los eventos
def on_agregar_entidad_click(b):
    agregar_entidad(entidad_input.value)
    with resultado:
        print(f"Entidad '{entidad_input.value}' agregada.")

def on_agregar_wallet_click(b):
    agregar_wallet(entidad_input.value, wallet_input.value, label_input.value)
    with resultado:
        print(f"Wallet '{wallet_input.value}' con label '{label_input.value}' agregada a la entidad '{entidad_input.value}'.")

# Asignar eventos a los botones
boton_agregar_entidad.on_click(on_agregar_entidad_click)
boton_agregar_wallet.on_click(on_agregar_wallet_click)

# Desplegar los widgets
display(entidad_input, boton_agregar_entidad, wallet_input, label_input, boton_agregar_wallet, resultado)

# Campo de texto y botón para búsqueda de wallet
wallet_buscar_input = widgets.Text(placeholder='Buscar wallet')
boton_buscar_wallet = widgets.Button(description="Buscar Wallet")

# Función para búsqueda
def on_buscar_wallet_click(b):
    entidad, label = buscar_wallet(wallet_buscar_input.value)
    with resultado:
        if entidad:
            print(f"Wallet '{wallet_buscar_input.value}' pertenece a la entidad '{entidad}' con label '{label}'.")
        else:
            print(f"Wallet '{wallet_buscar_input.value}' no encontrada.")

# Asignar evento al botón de búsqueda
boton_buscar_wallet.on_click(on_buscar_wallet_click)

# Desplegar widgets de búsqueda
display(wallet_buscar_input, boton_buscar_wallet)

# Campos de texto para renombrar wallet
wallet_renombrar_input = widgets.Text(placeholder='Wallet')
nuevo_label_input = widgets.Text(placeholder='Nuevo Label')

# Botón para renombrar
boton_renombrar_wallet = widgets.Button(description="Renombrar Wallet")

# Función para renombrar wallet
def on_renombrar_wallet_click(b):
    renombrar_wallet(entidad_input.value, wallet_renombrar_input.value, nuevo_label_input.value)
    with resultado:
        print(f"Wallet '{wallet_renombrar_input.value}' renombrada a '{nuevo_label_input.value}'.")

# Asignar evento al botón de renombrar
boton_renombrar_wallet.on_click(on_renombrar_wallet_click)

# Desplegar widgets
display(wallet_renombrar_input, nuevo_label_input, boton_renombrar_wallet)

tabs = widgets.Tab(children=[entidad_input, boton_agregar_entidad, wallet_input, label_input, boton_agregar_wallet, wallet_buscar_input, boton_buscar_wallet])
tabs.set_title(0, 'Agregar Entidad')
tabs.set_title(1, 'Agregar Wallet')
tabs.set_title(2, 'Buscar Wallet')
display(tabs)

import ipywidgets as widgets
from IPython.display import display

# Diccionario para almacenar entidades y sus wallets
entidades = {}

# Crear entradas y botones
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
wallet_input = widgets.Text(placeholder="Wallet")
label_input = widgets.Text(placeholder="Label de la wallet")
wallet_buscar_input = widgets.Text(placeholder="Buscar wallet")
entidades_dropdown = widgets.Dropdown(placeholder="Selecciona una entidad")

# Botones
boton_agregar_entidad = widgets.Button(description="Agregar Entidad")
boton_agregar_wallet = widgets.Button(description="Agregar Wallet")
boton_buscar_wallet = widgets.Button(description="Buscar Wallet")
boton_mostrar_wallets = widgets.Button(description="Mostrar Wallets")

# Funciones de los botones
def agregar_entidad(b):
    entidad = entidad_input.value
    if entidad and entidad not in entidades:
        entidades[entidad] = {}
        entidades_dropdown.options = list(entidades.keys())
        entidad_input.value = ''  # Limpiar campo después de agregar
        print(f"Entidad '{entidad}' agregada.")
    else:
        print("La entidad ya existe o el campo está vacío.")

def agregar_wallet(b):
    entidad = entidades_dropdown.value
    wallet = wallet_input.value
    label = label_input.value
    if entidad and wallet and label:
        entidades[entidad][wallet] = label
        wallet_input.value = ''  # Limpiar campos después de agregar
        label_input.value = ''
        print(f"Wallet '{wallet}' agregada a la entidad '{entidad}'.")
    else:
        print("Por favor completa todos los campos.")

def buscar_wallet(b):
    wallet = wallet_buscar_input.value
    for entidad, wallets in entidades.items():
        if wallet in wallets:
            print(f"La wallet '{wallet}' pertenece a la entidad '{entidad}' con el label '{wallets[wallet]}'.")
            return
    print(f"No se encontró la wallet '{wallet}'.")

def mostrar_wallets_entidad(b):
    entidad = entidades_dropdown.value
    if entidad:
        print(f"Wallets de la entidad '{entidad}':")
        for wallet, label in entidades[entidad].items():
            print(f" - {wallet}: {label}")
    else:
        print("Selecciona una entidad.")

# Asignar funciones a los botones
boton_agregar_entidad.on_click(agregar_entidad)
boton_agregar_wallet.on_click(agregar_wallet)
boton_buscar_wallet.on_click(buscar_wallet)
boton_mostrar_wallets.on_click(mostrar_wallets_entidad)

# Crear tabs
tabs = widgets.Tab(children=[
    widgets.VBox([entidad_input, boton_agregar_entidad]),  # Tab para agregar entidad
    widgets.VBox([entidades_dropdown, wallet_input, label_input, boton_agregar_wallet]),  # Tab para agregar wallet
    widgets.VBox([wallet_buscar_input, boton_buscar_wallet]),  # Tab para buscar wallet
    widgets.VBox([entidades_dropdown, boton_mostrar_wallets])  # Tab para ver entidades y sus wallets
])

tabs.set_title(0, 'Agregar Entidad')
tabs.set_title(1, 'Agregar Wallet')
tabs.set_title(2, 'Buscar Wallet')
tabs.set_title(3, 'Ver Entidades')

# Mostrar los tabs
display(tabs)

import ipywidgets as widgets
from IPython.display import display

# Ejemplo de entidad con una tarjeta
def crear_tarjeta_entidad(nombre_entidad, num_wallets):
    tarjeta = widgets.VBox([
        widgets.Label(value=nombre_entidad, style={'font-weight': 'bold'}),
        widgets.Label(value=f'{num_wallets} wallets'),
        widgets.Button(description="Gestionar")
    ])
    tarjeta.layout = widgets.Layout(border='solid 1px black', padding='10px', width='200px')
    return tarjeta

# Crear varias tarjetas
entidades = [("Entidad 1", 5), ("Entidad 2", 10), ("Entidad 3", 15)]
tarjetas = [crear_tarjeta_entidad(e[0], e[1]) for e in entidades]

# Mostrar en un grid
grid = widgets.GridBox(tarjetas, layout=widgets.Layout(grid_template_columns="repeat(3, 200px)"))
display(grid)

import ipywidgets as widgets
from IPython.display import display

# Diccionario para almacenar entidades y sus wallets con labels
entidades_data = {}

# Crear la tarjeta de entidad
def crear_tarjeta_entidad(nombre_entidad, num_wallets):
    gestionar_button = widgets.Button(description="Gestionar")
    gestionar_button.on_click(lambda x: gestionar_entidad(nombre_entidad))

    tarjeta = widgets.VBox([
        widgets.Label(value=nombre_entidad, style={'font-weight': 'bold'}),
        widgets.Label(value=f'{num_wallets} wallets'),
        gestionar_button
    ])
    tarjeta.layout = widgets.Layout(border='solid 1px black', padding='10px', width='200px')
    return tarjeta

# Actualizar la visualización de entidades
def actualizar_entidades(filtro=""):
    tarjetas = [crear_tarjeta_entidad(entidad, len(wallets))
                for entidad, wallets in entidades_data.items()
                if filtro.lower() in entidad.lower()]

    grid = widgets.GridBox(tarjetas, layout=widgets.Layout(grid_template_columns="repeat(3, 200px)"))
    display(grid)

# Gestionar una entidad: agregar, editar y eliminar wallets
def gestionar_entidad(entidad):
    wallet_input = widgets.Text(placeholder="Agregar nueva wallet")
    label_input = widgets.Text(placeholder="Label de la wallet")
    agregar_button = widgets.Button(description="Agregar Wallet")
    lista_wallets = widgets.VBox([widgets.Label(f"Wallets en {entidad}:")])

    def refrescar_wallets():
        elementos_wallet = []
        for wallet, label in entidades_data[entidad]:
            wallet_label = widgets.HBox([
                widgets.Label(f"{wallet} ({label})"),
                widgets.Button(description="Editar", button_style='warning', layout=widgets.Layout(width="100px")),
                widgets.Button(description="Eliminar", button_style='danger', layout=widgets.Layout(width="100px"))
            ])

            wallet_label.children[1].on_click(lambda x, w=wallet: editar_wallet(entidad, w))
            wallet_label.children[2].on_click(lambda x, w=wallet: eliminar_wallet(entidad, w))
            elementos_wallet.append(wallet_label)

        lista_wallets.children = elementos_wallet

    def agregar_wallet(b):
        if wallet_input.value and label_input.value:
            entidades_data[entidad].append((wallet_input.value, label_input.value))
            wallet_input.value = ""
            label_input.value = ""
            refrescar_wallets()  # Actualizar visualización
            actualizar_entidades()  # Refrescar la lista de entidades

    agregar_button.on_click(agregar_wallet)

    refrescar_wallets()

    display(widgets.VBox([widgets.Label(f"Gestionar {entidad}"), wallet_input, label_input, agregar_button, lista_wallets]))

# Función para eliminar wallet
def eliminar_wallet(entidad, wallet):
    entidades_data[entidad] = [(w, l) for w, l in entidades_data[entidad] if w != wallet]
    gestionar_entidad(entidad)

# Función para editar una wallet
def editar_wallet(entidad, wallet):
    nueva_wallet = widgets.Text(value=wallet, description="Editar Wallet:")
    nuevo_label = widgets.Text(value=next((l for w, l in entidades_data[entidad] if w == wallet)), description="Editar Label:")
    guardar_button = widgets.Button(description="Guardar Cambios", button_style='success')

    def guardar_cambios(b):
        for i, (w, l) in enumerate(entidades_data[entidad]):
            if w == wallet:
                entidades_data[entidad][i] = (nueva_wallet.value, nuevo_label.value)
        actualizar_entidades()  # Actualizar vista de entidades
        gestionar_entidad(entidad)  # Actualizar lista de wallets en la entidad

    guardar_button.on_click(guardar_cambios)
    display(widgets.VBox([nueva_wallet, nuevo_label, guardar_button]))

# Función para agregar una nueva entidad
def agregar_entidad(entidad):
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
        actualizar_entidades()

# Input y botón para agregar entidad
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_entidad.on_click(lambda x: agregar_entidad(entidad_input.value))

# Buscador de entidades
filtro_buscar = widgets.Text(placeholder="Buscar entidades")
filtro_buscar.observe(lambda change: actualizar_entidades(filtro_buscar.value), names='value')

# Mostrar todo
display(widgets.VBox([filtro_buscar, entidad_input, boton_agregar_entidad]))

# Actualizar lista de entidades
actualizar_entidades()

import ipywidgets as widgets
from IPython.display import display, clear_output

# Simular datos de entidades y wallets
entidades_data = {
    "DRAE": [
        {"wallet": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d", "label": "120K"}
    ]
}

# Función para actualizar la lista de entidades
def actualizar_entidades():
    filtro = filtro_buscar.value.lower()
    lista_entidades.children = []
    for entidad, wallets in entidades_data.items():
        if filtro in entidad.lower():
            dropdown = widgets.Dropdown(
                options=[(w["label"], w["wallet"]) for w in wallets],
                description=entidad,
                layout=widgets.Layout(width="auto")
            )
            gestionar_button = widgets.Button(description="Gestionar", button_style="info")
            gestionar_button.on_click(lambda x, e=entidad: gestionar_entidad(e))
            entidad_box = widgets.HBox([dropdown, gestionar_button])
            lista_entidades.children += (entidad_box,)

# Función para gestionar la entidad seleccionada
def gestionar_entidad(entidad):
    clear_output()
    print(f"Gestionar {entidad}")

    # Crear widgets para agregar y editar wallets
    nueva_wallet = widgets.Text(placeholder="Agregar nueva wallet")
    nuevo_label = widgets.Text(placeholder="Label de la wallet")
    agregar_wallet_button = widgets.Button(description="Agregar Wallet", button_style="primary")

    def agregar_wallet(_):
        if nueva_wallet.value and nuevo_label.value:
            entidades_data[entidad].append({"wallet": nueva_wallet.value, "label": nuevo_label.value})
            actualizar_entidades()
            gestionar_entidad(entidad)

    agregar_wallet_button.on_click(agregar_wallet)

    # Mostrar wallets existentes con opción de editar y eliminar
    wallets_box = []
    for wallet in entidades_data[entidad]:
        wallet_label = f"{wallet['wallet']} ({wallet['label']})"
        editar_button = widgets.Button(description="Editar", button_style="warning")
        eliminar_button = widgets.Button(description="Eliminar", button_style="danger")

        # Al hacer clic en "Editar", mostrar campos para editar la wallet y el label
        def editar_wallet(w, wl=wallet):
            nueva_wallet.value = wl["wallet"]
            nuevo_label.value = wl["label"]

        editar_button.on_click(editar_wallet)

        # Al hacer clic en "Eliminar", remover la wallet de la entidad
        def eliminar_wallet(w, wl=wallet):
            entidades_data[entidad].remove(wl)
            actualizar_entidades()
            gestionar_entidad(entidad)

        eliminar_button.on_click(eliminar_wallet)

        wallet_box = widgets.HBox([widgets.Label(wallet_label), editar_button, eliminar_button])
        wallets_box.append(wallet_box)

    wallets_vbox = widgets.VBox(wallets_box)

    # Botón para guardar los cambios realizados
    guardar_button = widgets.Button(description="Guardar Cambios", button_style="success")

    def guardar_cambios(_):
        for wallet in entidades_data[entidad]:
            if wallet["wallet"] == nueva_wallet.value:
                wallet["wallet"] = nueva_wallet.value
                wallet["label"] = nuevo_label.value
        actualizar_entidades()
        gestionar_entidad(entidad)

    guardar_button.on_click(guardar_cambios)

    # Botón para regresar a la vista principal
    regresar_button = widgets.Button(description="Volver", button_style="info")
    regresar_button.on_click(lambda x: mostrar_vista_principal())

    display(widgets.VBox([nueva_wallet, nuevo_label, agregar_wallet_button, wallets_vbox, guardar_button, regresar_button]))

# Función para mostrar la vista principal
def mostrar_vista_principal():
    clear_output()
    display(widgets.VBox([filtro_buscar, entidad_input, boton_agregar_entidad, lista_entidades]))
    actualizar_entidades()

# Función para agregar una nueva entidad
def agregar_entidad(entidad):
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
    actualizar_entidades()

# Input y botón para agregar entidad
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_entidad.on_click(lambda x: agregar_entidad(entidad_input.value))

# Buscador de entidades
filtro_buscar = widgets.Text(placeholder="Buscar entidades")
filtro_buscar.observe(lambda change: actualizar_entidades(), names='value')

# Mostrar todas las entidades
lista_entidades = widgets.VBox()
display(widgets.VBox([filtro_buscar, entidad_input, boton_agregar_entidad, lista_entidades]))

# Inicializar la vista principal
mostrar_vista_principal()

import ipywidgets as widgets
from IPython.display import display, clear_output

# Datos de ejemplo
entidades_data = {
    "DRAE": [("6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9yvwaEebQqEo8d", "120K")],
    "PEDRO": [("7abcde1234abcde5678fg123abcde890xyz", "christ?")]
}

# Función para actualizar la vista de entidades
def actualizar_entidades():
    clear_output()

    # Crear widgets de entidades
    entidades_widgets = []
    for entidad, wallets in entidades_data.items():
        dropdown = widgets.Dropdown(
            options=[(label, direccion) for direccion, label in wallets],
            description=entidad,
        )
        gestionar_button = widgets.Button(description="Gestionar", button_style='info')

        # Mostrar entidad, wallets en dropdown y botón de gestión
        entidad_widget = widgets.HBox([dropdown, gestionar_button])
        entidades_widgets.append(entidad_widget)

    # Mostrar todas las entidades
    display(widgets.VBox(entidades_widgets))

# Input para agregar una entidad
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')

# Agregar entidad
def agregar_entidad(entidad):
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
        actualizar_entidades()

boton_agregar_entidad.on_click(lambda x: agregar_entidad(entidad_input.value))

# Buscar entidades
filtro_buscar = widgets.Text(placeholder="Buscar entidades")
filtro_buscar.observe(lambda change: actualizar_entidades(), names='value')

# Mostrar todo
display(widgets.VBox([filtro_buscar, entidad_input, boton_agregar_entidad]))
actualizar_entidades()

import ipywidgets as widgets
from IPython.display import display, clear_output

# Variables globales
entidades_data = {}

# Función para actualizar la vista de entidades
def actualizar_entidades(filtro=""):
    clear_output()
    display(filtro_buscar, entidad_input, boton_agregar_entidad)

    for entidad, wallets in entidades_data.items():
        if filtro.lower() in entidad.lower() or any(filtro.lower() in wallet['label'].lower() or filtro.lower() in wallet['wallet'].lower() for wallet in wallets):
            desplegable = widgets.Dropdown(
                options=[(f"{wallet['label']} ({wallet['wallet']})", wallet['wallet']) for wallet in wallets],
                description=entidad
            )
            gestionar_button = widgets.Button(description="Gestionar", button_style='info')
            gestionar_button.on_click(lambda _, ent=entidad: gestionar_entidad(ent))
            display(widgets.HBox([desplegable, gestionar_button]))

# Función para agregar una nueva wallet
def agregar_wallet(entidad, nueva_wallet, nuevo_label):
    if entidad in entidades_data:
        entidades_data[entidad].append({'wallet': nueva_wallet, 'label': nuevo_label})
    else:
        entidades_data[entidad] = [{'wallet': nueva_wallet, 'label': nuevo_label}]
    actualizar_entidades()

# Función para gestionar una entidad (Agregar/Editar/Eliminar Wallets)
def gestionar_entidad(entidad):
    clear_output()
    display(filtro_buscar, entidad_input, boton_agregar_entidad)

    if entidad in entidades_data:
        display(widgets.HTML(f"<h3>Gestionar {entidad}</h3>"))
        nueva_wallet = widgets.Text(placeholder="Agregar nueva wallet")
        nuevo_label = widgets.Text(placeholder="Label de la wallet")
        agregar_button = widgets.Button(description="Agregar Wallet", button_style='success')
        agregar_button.on_click(lambda _: agregar_wallet(entidad, nueva_wallet.value, nuevo_label.value))
        display(widgets.VBox([nueva_wallet, nuevo_label, agregar_button]))

        # Mostrar wallets existentes
        for wallet in entidades_data[entidad]:
            editar_wallet = widgets.Text(value=wallet['wallet'], placeholder="Editar Wallet")
            editar_label = widgets.Text(value=wallet['label'], placeholder="Editar Label")
            guardar_button = widgets.Button(description="Guardar Cambios", button_style='success')
            eliminar_button = widgets.Button(description="Eliminar", button_style='danger')

            # Funcionalidad para eliminar wallet
            eliminar_button.on_click(lambda _, ent=entidad, w=wallet: eliminar_wallet(ent, w))

            # Funcionalidad para guardar cambios
            guardar_button.on_click(lambda _, ent=entidad, w=wallet, ew=editar_wallet, el=editar_label: guardar_cambios(ent, w, ew.value, el.value))
            display(widgets.HBox([editar_wallet, editar_label, guardar_button, eliminar_button]))

        # Botón para volver a la vista principal
        boton_volver = widgets.Button(description="Volver", button_style='warning')
        boton_volver.on_click(lambda _: actualizar_entidades())
        display(boton_volver)

# Función para eliminar una wallet
def eliminar_wallet(entidad, wallet):
    entidades_data[entidad].remove(wallet)
    actualizar_entidades()

# Función para guardar cambios en una wallet
def guardar_cambios(entidad, wallet, nueva_wallet, nuevo_label):
    wallet['wallet'] = nueva_wallet
    wallet['label'] = nuevo_label
    actualizar_entidades()

# Función para agregar una nueva entidad
def agregar_entidad(entidad):
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
    actualizar_entidades()

# Input y botón para agregar entidad
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_entidad.on_click(lambda _: agregar_entidad(entidad_input.value))

# Buscador de entidades
filtro_buscar = widgets.Text(placeholder="Buscar entidades")
filtro_buscar.observe(lambda change: actualizar_entidades(filtro_buscar.value), names='value')

# Mostrar todo
display(widgets.VBox([filtro_buscar, entidad_input, boton_agregar_entidad]))

# Actualizar lista de entidades
actualizar_entidades()

import ipywidgets as widgets
from IPython.display import display, clear_output

# Datos almacenados de entidades y wallets
entidades_data = {
    "DRAE": [("6N9CDZ7sNRYQ7BWDJX3ibL3359rVXN9yvwaEebQqEo8d", "120K")],
    "PEDRO": [("DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck", "christ?")]
}

# Función para actualizar la visualización de entidades
def actualizar_entidades():
    clear_output()
    # Iterar sobre las entidades y mostrar su info
    for entidad, wallets in entidades_data.items():
        dropdown_wallets = widgets.Dropdown(
            options=[(label, wallet) for wallet, label in wallets],
            description=entidad,
            style={'description_width': 'initial'},
            layout=widgets.Layout(width='250px')
        )
        contador = widgets.HTML(f"<b>{len(wallets)} wallets</b>")
        gestionar_button = widgets.Button(description="Gestionar", button_style="info")

        display(widgets.HBox([dropdown_wallets, contador, gestionar_button]))

# Input para agregar entidad
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')

# Función para agregar una nueva entidad
def agregar_entidad(entidad):
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
        actualizar_entidades()

boton_agregar_entidad.on_click(lambda x: agregar_entidad(entidad_input.value))

# Buscador de entidades
filtro_buscar = widgets.Text(placeholder="Buscar entidades")
filtro_buscar.observe(lambda change: actualizar_entidades(), names='value')

# Mostrar todo
display(widgets.VBox([filtro_buscar, entidad_input, boton_agregar_entidad]))
actualizar_entidades()

import ipywidgets as widgets
from IPython.display import display

# Estructura inicial para almacenar entidades y wallets
entidades_data = {
    "DRAE": [("6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d", "120K")],
    "PEDRO": [("DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck", "christ?")]
}

# Función para actualizar la visualización de wallets
def actualizar_entidades():
    # Limpiamos la salida previa
    output.clear_output()
    with output:
        # Mostrar todas las entidades y sus wallets
        for entidad, wallets in entidades_data.items():
            for wallet, label in wallets:
                label_dropdown = widgets.Dropdown(
                    options=[label for _, label in wallets],
                    description=entidad,
                    layout=widgets.Layout(width="200px")
                )

                # Caja de texto que mostrará la dirección de la wallet
                direccion_wallet = widgets.Text(
                    value=wallet,
                    description="Dirección:",
                    layout=widgets.Layout(width="400px"),
                    disabled=True
                )

                # Función para actualizar la dirección según el label seleccionado
                def mostrar_direccion(cambio):
                    seleccion = cambio["new"]
                    for wal, lab in wallets:
                        if lab == seleccion:
                            direccion_wallet.value = wal

                label_dropdown.observe(mostrar_direccion, names="value")

                # Mostrar dropdown y campo de dirección
                display(widgets.HBox([label_dropdown, direccion_wallet]))

# Output inicial donde se mostrará todo
output = widgets.Output()

# Ejecutar la función inicial para mostrar las entidades y wallets
actualizar_entidades()

# Mostrar todo
display(output)

import ipywidgets as widgets
from IPython.display import display

# Almacenamiento de datos
entidades_data = {}

# Función para actualizar el desplegable de wallets
def actualizar_wallets():
    wallets_dropdown.options = list(entidades_data[entidad_dropdown.value].keys())
    actualizar_direccion_wallet(None)

# Función para actualizar el número de wallets por entidad
def actualizar_entidades():
    entidades_list.children = []
    for entidad, wallets in entidades_data.items():
        label_entidad = f"{entidad} ({len(wallets)} wallets)"
        desplegable_wallets = widgets.Dropdown(options=list(wallets.keys()), layout=widgets.Layout(width='200px'))
        direccion_wallet = widgets.Text(value='', disabled=True, layout=widgets.Layout(width='400px'))

        def mostrar_direccion(change):
            direccion_wallet.value = wallets[desplegable_wallets.value]

        desplegable_wallets.observe(mostrar_direccion, names='value')

        boton_gestionar = widgets.Button(description="Gestionar", button_style='info')
        entidades_list.children += [widgets.HBox([widgets.Label(label_entidad), desplegable_wallets, widgets.Label("Dirección:"), direccion_wallet, boton_gestionar])]

# Función para agregar nueva entidad
def agregar_entidad(entidad):
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = {}
        actualizar_entidades()

# Función para agregar nueva wallet
def agregar_wallet(wallet, label):
    entidad = entidad_dropdown.value
    if entidad and wallet and label:
        entidades_data[entidad][label] = wallet
        actualizar_entidades()

# Función para gestionar una entidad
def gestionar_entidad(entidad):
    gestionar_list.children = []
    nueva_wallet = widgets.Text(placeholder="Nueva wallet")
    nuevo_label = widgets.Text(placeholder="Label de la wallet")
    boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='primary')

    def guardar_wallet(c):
        entidades_data[entidad][nuevo_label.value] = nueva_wallet.value
        actualizar_entidades()

    boton_agregar_wallet.on_click(guardar_wallet)
    gestionar_list.children += [nueva_wallet, nuevo_label, boton_agregar_wallet]

# Inputs y botones de la interfaz
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_entidad.on_click(lambda x: agregar_entidad(entidad_input.value))

wallet_input = widgets.Text(placeholder="Dirección de la wallet")
label_input = widgets.Text(placeholder="Label de la wallet")
boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='primary')
boton_agregar_wallet.on_click(lambda x: agregar_wallet(wallet_input.value, label_input.value))

entidad_dropdown = widgets.Dropdown(options=list(entidades_data.keys()))
wallets_dropdown = widgets.Dropdown()

# Layout principal
entidades_list = widgets.VBox()
gestionar_list = widgets.VBox()
display(widgets.VBox([
    widgets.HBox([entidad_input, boton_agregar_entidad]),
    widgets.HBox([wallet_input, label_input, boton_agregar_wallet]),
    widgets.HBox([entidad_dropdown, wallets_dropdown]),
    entidades_list,
    gestionar_list
]))

# Inicializar la vista
actualizar_entidades()

import ipywidgets as widgets
from IPython.display import display

# Almacenamiento de datos preexistentes
entidades_data = {
    "Drae": {
        "120k": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"
    },
    "Pedro": {
        "christ": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"
    }
}

# Función para actualizar el desplegable de wallets
def actualizar_wallets():
    wallets_dropdown.options = list(entidades_data[entidad_dropdown.value].keys())
    actualizar_direccion_wallet(None)

# Función para actualizar el número de wallets por entidad
def actualizar_entidades():
    entidades_list.children = []
    for entidad, wallets in entidades_data.items():
        label_entidad = f"{entidad} ({len(wallets)} wallets)"
        desplegable_wallets = widgets.Dropdown(options=list(wallets.keys()), layout=widgets.Layout(width='200px'))
        direccion_wallet = widgets.Text(value='', disabled=True, layout=widgets.Layout(width='500px'))

        def mostrar_direccion(change):
            direccion_wallet.value = wallets[desplegable_wallets.value]

        desplegable_wallets.observe(mostrar_direccion, names='value')

        boton_gestionar = widgets.Button(description="Gestionar", button_style='info')
        entidades_list.children += [widgets.HBox([widgets.Label(label_entidad), desplegable_wallets, widgets.Label("Dirección:"), direccion_wallet, boton_gestionar])]

# Función para agregar nueva entidad
def agregar_entidad(entidad):
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = {}
        actualizar_entidades()

# Función para agregar nueva wallet
def agregar_wallet(wallet, label):
    entidad = entidad_dropdown.value
    if entidad and wallet and label:
        entidades_data[entidad][label] = wallet
        actualizar_entidades()

# Función para gestionar una entidad
def gestionar_entidad(entidad):
    gestionar_list.children = []
    nueva_wallet = widgets.Text(placeholder="Nueva wallet")
    nuevo_label = widgets.Text(placeholder="Label de la wallet")
    boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='primary')

    def guardar_wallet(c):
        entidades_data[entidad][nuevo_label.value] = nueva_wallet.value
        actualizar_entidades()

    boton_agregar_wallet.on_click(guardar_wallet)
    gestionar_list.children += [nueva_wallet, nuevo_label, boton_agregar_wallet]

# Inputs y botones de la interfaz
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_entidad.on_click(lambda x: agregar_entidad(entidad_input.value))

wallet_input = widgets.Text(placeholder="Dirección de la wallet")
label_input = widgets.Text(placeholder="Label de la wallet")
boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='primary')
boton_agregar_wallet.on_click(lambda x: agregar_wallet(wallet_input.value, label_input.value))

entidad_dropdown = widgets.Dropdown(options=list(entidades_data.keys()))
wallets_dropdown = widgets.Dropdown()

# Layout principal
entidades_list = widgets.VBox()
gestionar_list = widgets.VBox()
display(widgets.VBox([
    widgets.HBox([entidad_input, boton_agregar_entidad]),
    widgets.HBox([wallet_input, label_input, boton_agregar_wallet]),
    widgets.HBox([entidad_dropdown, wallets_dropdown]),
    entidades_list,
    gestionar_list
]))

# Inicializar la vista
actualizar_entidades()

import ipywidgets as widgets
from IPython.display import display

# Inicializar la base de datos de entidades y wallets
entidades_data = {
    'Drae': [{'wallet': '6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d', 'label': '120K'}],
    'Pedro': [{'wallet': 'DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck', 'label': 'christ?'}]
}

# Función para actualizar la lista de entidades
def actualizar_entidades():
    entidades_list.children = []  # Limpiar la lista de entidades
    for entidad, wallets in entidades_data.items():
        label_entidad = widgets.Label(value=f"{entidad}")
        desplegable_wallets = widgets.Dropdown(
            options=[(w['label'], w['wallet']) for w in wallets],
            description='Label',
            style={'description_width': 'initial'}
        )
        direccion_wallet = widgets.Text(
            value=desplegable_wallets.value,
            description='Dirección:',
            disabled=True
        )

        # Actualizar la dirección al cambiar el desplegable
        def actualizar_direccion(change):
            direccion_wallet.value = change.new

        desplegable_wallets.observe(actualizar_direccion, names='value')

        boton_gestionar = widgets.Button(description="Gestionar", button_style='info')

        # Agregar cada fila a la lista de entidades
        entidades_list.children += (widgets.HBox([widgets.Label(entidad), desplegable_wallets, widgets.Label("1 wallets"), direccion_wallet, boton_gestionar]),)

# Función para agregar una nueva entidad
def agregar_entidad(_):
    nueva_entidad = entidad_input.value.strip()
    if nueva_entidad and nueva_entidad not in entidades_data:
        entidades_data[nueva_entidad] = []
        actualizar_entidades()

# Función para agregar una wallet a una entidad
def agregar_wallet(_):
    entidad_seleccionada = entidad_dropdown.value
    nueva_wallet = wallet_input.value.strip()
    nuevo_label = label_input.value.strip()
    if entidad_seleccionada and nueva_wallet and nuevo_label:
        entidades_data[entidad_seleccionada].append({'wallet': nueva_wallet, 'label': nuevo_label})
        actualizar_entidades()

# Input y botón para agregar entidad
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_entidad.on_click(agregar_entidad)

# Input y botón para agregar wallet
wallet_input = widgets.Text(placeholder="Dirección de la wallet")
label_input = widgets.Text(placeholder="Label de la wallet")
boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='info')
boton_agregar_wallet.on_click(agregar_wallet)

# Desplegable para seleccionar entidad
entidad_dropdown = widgets.Dropdown(options=list(entidades_data.keys()), description="Entidad")

# Contenedores para las entidades y la gestión de wallets
entidades_list = widgets.VBox()
gestionar_list = widgets.VBox()

# Mostrar la interfaz gráfica
display(widgets.VBox([
    widgets.HBox([entidad_input, boton_agregar_entidad]),
    widgets.HBox([wallet_input, label_input, boton_agregar_wallet]),
    widgets.HBox([entidad_dropdown]),
    entidades_list,
    gestionar_list
]))

# Inicializar la vista
actualizar_entidades()

import ipywidgets as widgets
from IPython.display import display

# Base de datos temporal para almacenar entidades y wallets
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}],
}

# Input para nueva entidad
entidad_input = widgets.Text(placeholder="Nombre de la entidad")

# Input para nueva wallet
wallet_input = widgets.Text(placeholder="Dirección de la wallet")
label_input = widgets.Text(placeholder="Label de la wallet")

# Dropdown para seleccionar entidad y wallet
entidad_dropdown = widgets.Dropdown()
wallets_dropdown = widgets.Dropdown()

# Campos para mostrar la dirección
direccion_wallet = widgets.Text(value="", disabled=True, layout=widgets.Layout(width="600px"))

# Botón para agregar entidad
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')

# Botón para agregar wallet
boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='info')

# Función para actualizar el dropdown de entidades y wallets
def actualizar_entidades():
    entidad_dropdown.options = list(entidades_data.keys())
    actualizar_wallets()

# Función para actualizar las wallets del dropdown
def actualizar_wallets(*args):
    entidad = entidad_dropdown.value
    if entidad in entidades_data:
        wallets_dropdown.options = [(wallet['label'], wallet['direccion']) for wallet in entidades_data[entidad]]
    else:
        wallets_dropdown.options = []
    direccion_wallet.value = wallets_dropdown.value if wallets_dropdown.value else ""

# Función para agregar una nueva entidad
def agregar_entidad(b):
    nueva_entidad = entidad_input.value
    if nueva_entidad and nueva_entidad not in entidades_data:
        entidades_data[nueva_entidad] = []
        actualizar_entidades()

# Función para agregar una nueva wallet
def agregar_wallet(b):
    entidad = entidad_dropdown.value
    nueva_wallet = wallet_input.value
    nuevo_label = label_input.value
    if entidad and nueva_wallet and nuevo_label:
        entidades_data[entidad].append({"label": nuevo_label, "direccion": nueva_wallet})
        actualizar_wallets()

# Función para gestionar wallets (placeholder de momento)
def gestionar_wallet(entidad):
    print(f"Gestionar wallets para {entidad}")

# Widgets interactivos
wallets_dropdown.observe(lambda change: direccion_wallet.value = wallets_dropdown.value, names='value')
boton_agregar_entidad.on_click(agregar_entidad)
boton_agregar_wallet.on_click(agregar_wallet)

# Layout principal
entidades_list = widgets.VBox()
gestionar_list = widgets.VBox()

# Mostrar la interfaz gráfica
display(widgets.VBox([
    widgets.HBox([entidad_input, boton_agregar_entidad]),
    widgets.HBox([wallet_input, label_input, boton_agregar_wallet]),
    widgets.HBox([entidad_dropdown, wallets_dropdown]),
    widgets.HBox([widgets.Label("Dirección:"), direccion_wallet]),
    entidades_list,
    gestionar_list
]))

# Inicializar la vista
actualizar_entidades()

import ipywidgets as widgets

# Datos de ejemplo (las dos wallets mencionadas)
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
}

# Inputs y botones para agregar entidad y wallets
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
wallet_input = widgets.Text(placeholder="Dirección de la wallet")
label_input = widgets.Text(placeholder="Label de la wallet")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='info')

# Desplegables y campos
entidad_dropdown = widgets.Dropdown(options=list(entidades_data.keys()), description="Entidad")
wallets_dropdown = widgets.Dropdown(description="Label", options=[], layout=widgets.Layout(width='150px'))
direccion_wallet = widgets.Text(description="Dirección:", layout=widgets.Layout(width='600px'))  # Campo más amplio

# Función para actualizar las wallets del desplegable al cambiar la entidad
def actualizar_wallets(*args):
    entidad_seleccionada = entidad_dropdown.value
    wallets_dropdown.options = [(wallet['label'], wallet['direccion']) for wallet in entidades_data[entidad_seleccionada]]
    direccion_wallet.value = wallets_dropdown.value

entidad_dropdown.observe(actualizar_wallets, names='value')

# Función para actualizar la dirección mostrada al cambiar el label en el desplegable
def actualizar_direccion(change):
    direccion_wallet.value = wallets_dropdown.value

wallets_dropdown.observe(actualizar_direccion, names='value')

# Función para agregar una nueva entidad
def agregar_entidad(_):
    entidad = entidad_input.value
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
        actualizar_entidades()

boton_agregar_entidad.on_click(agregar_entidad)

# Función para agregar una nueva wallet a una entidad existente
def agregar_wallet(_):
    entidad = entidad_dropdown.value
    if entidad:
        nueva_wallet = {"label": label_input.value, "direccion": wallet_input.value}
        entidades_data[entidad].append(nueva_wallet)
        actualizar_wallets()

boton_agregar_wallet.on_click(agregar_wallet)

# Layout principal
entidades_list = widgets.VBox()
gestionar_list = widgets.VBox()
display(widgets.VBox([
    widgets.HBox([entidad_input, boton_agregar_entidad]),
    widgets.HBox([wallet_input, label_input, boton_agregar_wallet]),
    widgets.HBox([entidad_dropdown, wallets_dropdown, direccion_wallet]),
    entidades_list,
    gestionar_list
]))

# Inicializar la lista
actualizar_wallets()

import ipywidgets as widgets

# Datos de ejemplo (las dos wallets mencionadas)
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
}

# Inputs y botones para agregar entidad y wallets
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
wallet_input = widgets.Text(placeholder="Dirección de la wallet")
label_input = widgets.Text(placeholder="Label de la wallet")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='info')

# Inputs para editar wallet
nueva_label_input = widgets.Text(placeholder="Editar Label")
nueva_entidad_dropdown = widgets.Dropdown(description="Mover a Entidad", options=list(entidades_data.keys()))

# Botones de acciones
boton_guardar_cambios = widgets.Button(description="Guardar Cambios", button_style='success')
boton_eliminar_wallet = widgets.Button(description="Eliminar Wallet", button_style='danger')

# Desplegables y campos
entidad_dropdown = widgets.Dropdown(options=list(entidades_data.keys()), description="Entidad")
wallets_dropdown = widgets.Dropdown(description="Label", options=[], layout=widgets.Layout(width='150px'))
direccion_wallet = widgets.Text(description="Dirección:", layout=widgets.Layout(width='600px'))  # Campo más amplio

# Función para actualizar las wallets del desplegable al cambiar la entidad
def actualizar_wallets(*args):
    entidad_seleccionada = entidad_dropdown.value
    wallets_dropdown.options = [(wallet['label'], wallet['direccion']) for wallet in entidades_data[entidad_seleccionada]]
    direccion_wallet.value = wallets_dropdown.value

entidad_dropdown.observe(actualizar_wallets, names='value')

# Función para actualizar la dirección mostrada al cambiar el label en el desplegable
def actualizar_direccion(change):
    direccion_wallet.value = wallets_dropdown.value
    # Actualizar inputs de edición
    nueva_label_input.value = wallets_dropdown.label
    nueva_entidad_dropdown.value = entidad_dropdown.value

wallets_dropdown.observe(actualizar_direccion, names='value')

# Función para agregar una nueva entidad
def agregar_entidad(_):
    entidad = entidad_input.value
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
        actualizar_entidades()

boton_agregar_entidad.on_click(agregar_entidad)

# Función para agregar una nueva wallet a una entidad existente
def agregar_wallet(_):
    entidad = entidad_dropdown.value
    if entidad:
        nueva_wallet = {"label": label_input.value, "direccion": wallet_input.value}
        entidades_data[entidad].append(nueva_wallet)
        actualizar_wallets()

boton_agregar_wallet.on_click(agregar_wallet)

# Función para guardar cambios en la wallet
def guardar_cambios(_):
    entidad = entidad_dropdown.value
    label_actual = wallets_dropdown.label
    nueva_entidad = nueva_entidad_dropdown.value
    nueva_label = nueva_label_input.value

    # Buscar y editar la wallet
    for wallet in entidades_data[entidad]:
        if wallet['label'] == label_actual:
            wallet['label'] = nueva_label
            # Si la wallet debe moverse a otra entidad
            if entidad != nueva_entidad:
                entidades_data[entidad].remove(wallet)
                entidades_data[nueva_entidad].append(wallet)
            break
    actualizar_wallets()

boton_guardar_cambios.on_click(guardar_cambios)

# Función para eliminar la wallet seleccionada
def eliminar_wallet(_):
    entidad = entidad_dropdown.value
    label_actual = wallets_dropdown.label

    # Buscar y eliminar la wallet
    entidades_data[entidad] = [wallet for wallet in entidades_data[entidad] if wallet['label'] != label_actual]
    actualizar_wallets()

boton_eliminar_wallet.on_click(eliminar_wallet)

# Layout principal
entidades_list = widgets.VBox()
gestionar_list = widgets.VBox()
display(widgets.VBox([
    widgets.HBox([entidad_input, boton_agregar_entidad]),
    widgets.HBox([wallet_input, label_input, boton_agregar_wallet]),
    widgets.HBox([entidad_dropdown, wallets_dropdown, direccion_wallet]),
    widgets.HBox([nueva_label_input, nueva_entidad_dropdown, boton_guardar_cambios, boton_eliminar_wallet]),
    entidades_list,
    gestionar_list
]))

# Inicializar la lista
actualizar_wallets()

import ipywidgets as widgets
import json
import os
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Ruta del archivo donde se guardarán los datos
ruta_archivo = '/content/drive/My Drive/wallets_data.json'

# Función para guardar los datos en un archivo JSON
def guardar_datos():
    with open(ruta_archivo, 'w') as f:
        json.dump(entidades_data, f)

# Función para cargar los datos desde un archivo JSON (si existe)
def cargar_datos():
    global entidades_data
    if os.path.exists(ruta_archivo):
        with open(ruta_archivo, 'r') as f:
            entidades_data = json.load(f)
    else:
        entidades_data = {
            "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
            "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
        }

# Cargar los datos al iniciar
cargar_datos()

# Inputs y botones para agregar entidad y wallets
entidad_input = widgets.Text(placeholder="Nombre de la entidad")
wallet_input = widgets.Text(placeholder="Dirección de la wallet")
label_input = widgets.Text(placeholder="Label de la wallet")
boton_agregar_entidad = widgets.Button(description="Agregar Entidad", button_style='success')
boton_agregar_wallet = widgets.Button(description="Agregar Wallet", button_style='info')

# Inputs para editar wallet
nueva_label_input = widgets.Text(placeholder="Editar Label")
nueva_entidad_dropdown = widgets.Dropdown(description="Mover a Entidad", options=list(entidades_data.keys()))

# Botones de acciones
boton_guardar_cambios = widgets.Button(description="Guardar Cambios", button_style='success')
boton_eliminar_wallet = widgets.Button(description="Eliminar Wallet", button_style='danger')

# Desplegables y campos
entidad_dropdown = widgets.Dropdown(options=list(entidades_data.keys()), description="Entidad")
wallets_dropdown = widgets.Dropdown(description="Label", options=[], layout=widgets.Layout(width='150px'))
direccion_wallet = widgets.Text(description="Dirección:", layout=widgets.Layout(width='600px'))  # Campo más amplio

# Función para actualizar las wallets del desplegable al cambiar la entidad
def actualizar_wallets(*args):
    entidad_seleccionada = entidad_dropdown.value
    wallets_dropdown.options = [(wallet['label'], wallet['direccion']) for wallet in entidades_data[entidad_seleccionada]]
    direccion_wallet.value = wallets_dropdown.value

entidad_dropdown.observe(actualizar_wallets, names='value')

# Función para actualizar la dirección mostrada al cambiar el label en el desplegable
def actualizar_direccion(change):
    direccion_wallet.value = wallets_dropdown.value
    # Actualizar inputs de edición
    nueva_label_input.value = wallets_dropdown.label
    nueva_entidad_dropdown.value = entidad_dropdown.value

wallets_dropdown.observe(actualizar_direccion, names='value')

# Función para agregar una nueva entidad
def agregar_entidad(_):
    entidad = entidad_input.value
    if entidad and entidad not in entidades_data:
        entidades_data[entidad] = []
        guardar_datos()  # Guardar automáticamente
        actualizar_entidades()

boton_agregar_entidad.on_click(agregar_entidad)

# Función para agregar una nueva wallet a una entidad existente
def agregar_wallet(_):
    entidad = entidad_dropdown.value
    if entidad:
        nueva_wallet = {"label": label_input.value, "direccion": wallet_input.value}
        entidades_data[entidad].append(nueva_wallet)
        guardar_datos()  # Guardar automáticamente
        actualizar_wallets()

boton_agregar_wallet.on_click(agregar_wallet)

# Función para guardar cambios en la wallet
def guardar_cambios(_):
    entidad = entidad_dropdown.value
    label_actual = wallets_dropdown.label
    nueva_entidad = nueva_entidad_dropdown.value
    nueva_label = nueva_label_input.value

    # Buscar y editar la wallet
    for wallet in entidades_data[entidad]:
        if wallet['label'] == label_actual:
            wallet['label'] = nueva_label
            # Si la wallet debe moverse a otra entidad
            if entidad != nueva_entidad:
                entidades_data[entidad].remove(wallet)
                entidades_data[nueva_entidad].append(wallet)
            break
    guardar_datos()  # Guardar automáticamente
    actualizar_wallets()

boton_guardar_cambios.on_click(guardar_cambios)

# Función para eliminar la wallet seleccionada
def eliminar_wallet(_):
    entidad = entidad_dropdown.value
    label_actual = wallets_dropdown.label

    # Buscar y eliminar la wallet
    entidades_data[entidad] = [wallet for wallet in entidades_data[entidad] if wallet['label'] != label_actual]
    guardar_datos()  # Guardar automáticamente
    actualizar_wallets()

boton_eliminar_wallet.on_click(eliminar_wallet)

# Layout principal
entidades_list = widgets.VBox()
gestionar_list = widgets.VBox()
display(widgets.VBox([
    widgets.HBox([entidad_input, boton_agregar_entidad]),
    widgets.HBox([wallet_input, label_input, boton_agregar_wallet]),
    widgets.HBox([entidad_dropdown, wallets_dropdown, direccion_wallet]),
    widgets.HBox([nueva_label_input, nueva_entidad_dropdown, boton_guardar_cambios, boton_eliminar_wallet]),
    entidades_list,
    gestionar_list
]))

# Inicializar la vista
actualizar_wallets()

!pip install --upgrade gspread

import gspread
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Autenticar tu cuenta de Google
auth.authenticate_user()
gc = gspread.authorize(GoogleCredentials.get_application_default())

# Abre la hoja de cálculo por su nombre: 'bbdd_wallets'
spreadsheet = gc.open('bbdd_wallets')  # Nombre de tu archivo en Google Sheets
sheet = spreadsheet.sheet1  # Usaremos la primera hoja de cálculo de ese archivo

# Función para agregar datos sin borrar los antiguos
def guardar_datos():
    # Itera sobre las entidades y sus wallets
    for entidad, wallets in entidades_data.items():
        for wallet in wallets:
            label = wallet['label']
            direccion = wallet['direccion']

            # Agrega una nueva fila al final de la hoja de cálculo con los datos
            sheet.append_row([entidad, label, direccion])

# Aquí puedes definir tus datos, por ejemplo:
# Esto es un ejemplo, debes asegurarte de tener tus datos en 'entidades_data'
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
}

# Llama a la función para guardar los datos en Google Sheets
guardar_datos()

import gspread
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Autenticar tu cuenta de Google
auth.authenticate_user()
gc = gspread.authorize(GoogleCredentials.get_application_default())

# Abre la hoja de cálculo por su nombre
sheet = gc.open('bbdd_wallets').sheet1

# Función para guardar datos en Google Sheets
def guardar_datos():
    for entidad, wallets in entidades_data.items():
        for wallet in wallets:
            label = wallet['label']
            direccion = wallet['direccion']
            sheet.append_row([entidad, label, direccion])

# Datos de ejemplo
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
}

# Llama a la función para guardar los datos en Google Sheets
guardar_datos()

# Instala los paquetes necesarios
!pip install google-auth google-auth-oauthlib google-auth-httplib2 --upgrade
!pip install --upgrade gspread

import gspread
from google.colab import auth
from google.auth import default

# Autenticar tu cuenta de Google
auth.authenticate_user()

# Obtiene las credenciales predeterminadas de la aplicación.
creds, _ = default()

# Autoriza gspread con las credenciales.
gc = gspread.authorize(creds)

# Abre la hoja de cálculo por su nombre
sheet = gc.open('bbdd_wallets').sheet1

# Función para guardar datos en Google Sheets
def guardar_datos():
    for entidad, wallets in entidades_data.items():
        for wallet in wallets:
            label = wallet['label']
            direccion = wallet['direccion']
            sheet.append_row([entidad, label, direccion])

# Datos de ejemplo
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
}

# Llama a la función para guardar los datos en Google Sheets
guardar_datos()

# Instala los paquetes necesarios
!pip install google-auth google-auth-oauthlib google-auth-httplib2 --upgrade
!pip install --upgrade gspread

import gspread
from google.colab import auth
from google.auth import default

# Autenticar tu cuenta de Google
auth.authenticate_user()

# Obtiene las credenciales predeterminadas de la aplicación.
creds, _ = default()

# Autoriza gspread con las credenciales.
gc = gspread.authorize(creds)

# Abre la hoja de cálculo por su nombre
sheet = gc.open('bbdd_wallets').sheet1

# Función para guardar datos en Google Sheets
def guardar_datos():
    for entidad, wallets in entidades_data.items():
        for wallet in wallets:
            label = wallet['label']
            direccion = wallet['direccion']
            sheet.append_row([entidad, label, direccion])

# Datos de ejemplo
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ?", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
}

# Llama a la función para guardar los datos en Google Sheets
guardar_datos()

import gspread
from google.colab import auth
from google.auth import default

# Autenticar tu cuenta de Google
auth.authenticate_user()

# Obtiene las credenciales predeterminadas de la aplicación.
creds, _ = default()

# Autoriza gspread con las credenciales.
gc = gspread.authorize(creds)

# Abre la hoja de cálculo por su nombre (asegúrate de que este nombre coincida con tu hoja de Google Sheets)
sheet = gc.open('bbdd_wallets').sheet1

# Prueba de escritura (escribe algo para comprobar que la conexión es exitosa)
sheet.append_row(['Prueba', 'Conexión', 'Exitosa'])

print("Conexión realizada y datos escritos correctamente.")

# Función para escribir una entidad y sus wallets en la hoja
def guardar_entidad_y_wallets(entidades_data):
    sheet.clear()  # Borra el contenido anterior de la hoja
    for entidad, wallets in entidades_data.items():
        for wallet in wallets:
            label = wallet['label']
            direccion = wallet['direccion']
            sheet.append_row([entidad, label, direccion])

# Función para leer los datos desde la hoja de Google Sheets
def leer_datos_sheet():
    registros = sheet.get_all_records()
    entidades_data = {}
    for registro in registros:
        entidad = registro['Entidad']
        label = registro['Label']
        direccion = registro['Dirección']
        if entidad not in entidades_data:
            entidades_data[entidad] = []
        entidades_data[entidad].append({'label': label, 'direccion': direccion})
    return entidades_data

# Ejemplo de cómo guardar los datos en la hoja de cálculo
guardar_entidad_y_wallets(entidades_data)

# Ejemplo de cómo leer los datos desde la hoja de cálculo
datos_leidos = leer_datos_sheet()
print(datos_leidos)

# Función para leer los datos desde la hoja de Google Sheets
def leer_datos_sheet():
    registros = sheet.get_all_records()
    print("Registros leídos desde Google Sheets:")
    print(registros)  # Imprime los registros para ver cómo están estructurados
    entidades_data = {}

    for registro in registros:
        print(f"Procesando registro: {registro}")  # Imprime cada registro
        entidad = registro.get('Entidad')  # Utiliza .get() para evitar errores si la clave no existe
        label = registro.get('Label')
        direccion = registro.get('Dirección')

        if entidad and label and direccion:  # Asegúrate de que los valores no sean None
            if entidad not in entidades_data:
                entidades_data[entidad] = []
            entidades_data[entidad].append({'label': label, 'direccion': direccion})

    return entidades_data

# Ejemplo de cómo leer los datos desde la hoja de cálculo
datos_leidos = leer_datos_sheet()
print(datos_leidos)

# Función para leer los datos desde la hoja de Google Sheets
def leer_datos_sheet():
    registros = sheet.get_all_records()
    print("Registros leídos desde Google Sheets:")
    print(registros)  # Imprime los registros para ver cómo están estructurados
    entidades_data = {}

    for registro in registros:
        print(f"Procesando registro: {registro}")  # Imprime cada registro
        entidad = registro.get('Entidad')  # Utiliza .get() para evitar errores si la clave no existe
        label = registro.get('Label')
        direccion = registro.get('Dirección')

        if entidad and label and direccion:  # Asegúrate de que los valores no sean None
            if entidad not in entidades_data:
                entidades_data[entidad] = []
            entidades_data[entidad].append({'label': label, 'direccion': direccion})

    return entidades_data

# Ejemplo de cómo leer los datos desde la hoja de cálculo
datos_leidos = leer_datos_sheet()
print(datos_leidos)

# Función para cargar los datos leídos en la interfaz
def actualizar_vista_con_datos():
    datos = leer_datos_sheet()

    for entidad, wallets in datos.items():
        for wallet in wallets:
            label = wallet['label']
            direccion = wallet['direccion']
            # Aquí podemos agregar cada wallet a la interfaz gráfica
            print(f"Entidad: {entidad}, Label: {label}, Dirección: {direccion}")
            # Actualiza la interfaz como corresponda (según cómo quieras mostrar los datos)

# Llama a la función para cargar los datos al inicio
actualizar_vista_con_datos()

# Función para guardar los datos de entidades y wallets en Google Sheets
def guardar_datos(entidades_data):
    # Borra los datos antiguos (si lo deseas)
    sheet.clear()

    # Vuelve a escribir los encabezados
    sheet.append_row(['Entidad', 'Label', 'Dirección'])

    # Escribe cada entidad y sus wallets
    for entidad, wallets in entidades_data.items():
        for wallet in wallets:
            label = wallet['label']
            direccion = wallet['direccion']
            sheet.append_row([entidad, label, direccion])

"""**A PARTIR DE AQUÍ SE EXPORTA A STREAMLIT**"""

!pip install streamlit

# Archivo Streamlit app (puedes modificar este código según tu app actual)
import streamlit as st

# Datos en memoria (luego puedes conectarlo a Google Sheets)
entidades_data = {
    "Drae": [{"label": "120K", "direccion": "6N9CDZ7sNRYQ7BWDJX3iLbL3359rVXN9yvwaEebQqEo8d"}],
    "Pedro": [{"label": "christ", "direccion": "DhxbZcn8oCgafGHSg1WX1bMhv5txGRraVMmR6G6RVnck"}]
}

# Título
st.title("Gestor de Wallets")

# Agregar nueva entidad
st.header("Agregar Entidad y Wallet")
nueva_entidad = st.text_input("Nombre de la Entidad")
nueva_wallet = st.text_input("Dirección de la Wallet")
nuevo_label = st.text_input("Label de la Wallet")

# Botón para agregar
if st.button("Agregar Wallet"):
    if nueva_entidad and nueva_wallet and nuevo_label:
        if nueva_entidad not in entidades_data:
            entidades_data[nueva_entidad] = []
        entidades_data[nueva_entidad].append({"label": nuevo_label, "direccion": nueva_wallet})
        st.success(f"Wallet agregada a la entidad {nueva_entidad}")
    else:
        st.error("Por favor, completa todos los campos")

# Mostrar entidades y wallets
st.header("Entidades y Wallets")
for entidad, wallets in entidades_data.items():
    st.subheader(f"Entidad: {entidad}")
    for wallet in wallets:
        st.write(f"Label: {wallet['label']}, Dirección: {wallet['direccion']}")